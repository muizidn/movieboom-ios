load('@build_bazel_rules_swift//swift:swift.bzl', 'swift_library')
load(
  "//Vendor/rules_pods/BazelExtensions:extensions.bzl",
  "acknowledged_target",
  "gen_module_map",
  "gen_includes",
  "headermap",
  "umbrella_header"
)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
filegroup(
  name = "viewdsl_package_hdrs",
  srcs = [
    "viewdsl_direct_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
swift_library(
  name = "viewdsl_swift",
  module_name = "ViewDSL",
  srcs = glob(
    [
      "ViewDSL/ViewDSL/**/*.swift"
    ]
  ),
  deps = [
    ":ViewDSL_module_map",
    ":ViewDSL_umbrella_header"
  ],
  data = [],
  copts = select(
    {
      "//conditions:default": [
        "-enable-testing",
        "-DDEBUG",
        "-Xcc",
        "-DPOD_CONFIGURATION_DEBUG=1",
        "-Xcc",
        "-DDEBUG=1"
      ],
      ":release": [
        "-Xcc",
        "-DPOD_CONFIGURATION_RELEASE=1"
      ]
    }
  ) + [
    "-DCOCOAPODS",
    "-Xcc",
    "-DCOCOAPODS=1",
    "-Xcc",
    "-I$(execpath viewdsl_hmap)",
    "-Xcc",
    "-I.",
    "-Xcc",
    "-D__SWIFTC__",
    "-Xfrontend",
    "-no-clang-module-breadcrumbs",
    "-Xcc",
    "-fmodule-map-file=$(execpath ViewDSL_module_map)",
    "-import-underlying-module"
  ],
  swiftc_inputs = [
    ":viewdsl_hmap",
    ":ViewDSL_module_map",
    ":ViewDSL_umbrella_header"
  ],
  generated_header_name = "ViewDSL-Swift.h",
  features = [
    "swift.no_generated_module_map"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "viewdsl_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "ViewDSL/ViewDSL/**/*.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "viewdsl_public_hdrs",
  srcs = glob(
    [
      "ViewDSL/ViewDSL/**/*.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "ViewDSL_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "ViewDSL/ViewDSL/**/*.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "viewdsl_hmap",
  namespace = "ViewDSL",
  hdrs = [
    "viewdsl_package_hdrs",
    ":ViewDSL_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
alias(
  name = "ViewDSL",
  actual = "viewdsl",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "viewdsl",
  enable_modules = 1,
  srcs = glob(
    [
      "ViewDSL/ViewDSL/**/*.m"
    ]
  ),
  module_map = ":ViewDSL_extended_module_map",
  hdrs = [
    ":ViewDSL_hdrs",
    ":viewdsl_hmap"
  ],
  pch = "pod_support/Headers/Private/viewdsl-prefix.pch",
  deps = [
    ":viewdsl_swift",
    ":viewdsl_hmap",
    ":ViewDSL_extended_module_map"
  ],
  copts = [
    "-I$(GENDIR)/Vendor/viewdsl/",
    "-fobjc-weak",
    "-Wno-everything",
    "-Wnon-modular-include-in-framework-module",
    "-g",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fembed-bitcode-marker",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-error=nonportable-include-path"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-I$(GENDIR)/Vendor/viewdsl/viewdsl_hmap.hmap",
    "-I."
  ] + [
    "-fmodule-name=ViewDSL",
    "-fmodules"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "viewdsl_acknowledgement",
  deps = [],
  value = "//Vendor/viewdsl/pod_support_buildable:acknowledgement_fragment"
)
gen_module_map(
  name = "ViewDSL_module_map",
  module_name = "ViewDSL",
  hdrs = [
    "viewdsl_public_hdrs"
  ],
  module_map_name = "ViewDSL.modulemap",
  umbrella_hdr = "ViewDSL_umbrella_header",
  visibility = [
    "//visibility:public"
  ]
)
umbrella_header(
  name = "ViewDSL_umbrella_header",
  hdrs = [
    "viewdsl_public_hdrs"
  ]
)
gen_module_map(
  name = "ViewDSL_extended_module_map",
  module_name = "ViewDSL",
  hdrs = [
    "viewdsl_public_hdrs"
  ],
  swift_hdr = "../ViewDSL-Swift.h",
  visibility = [
    "//visibility:public"
  ]
)